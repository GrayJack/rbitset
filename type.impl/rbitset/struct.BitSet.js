(function() {var type_impls = {
"rbitset":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binary-for-BitSet%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#69-86\">source</a><a href=\"#impl-Binary-for-BitSet%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Binary.html\" title=\"trait core::fmt::Binary\">Binary</a> for <a class=\"struct\" href=\"rbitset/struct.BitSet.html\" title=\"struct rbitset::BitSet\">BitSet</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Binary.html\" title=\"trait core::fmt::Binary\">Binary</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#72-85\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Binary.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/nightly/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Binary","rbitset::BitSet8","rbitset::BitSet16","rbitset::BitSet32","rbitset::BitSet64","rbitset::BitSet128","rbitset::BitSet256","rbitset::BitSet512","rbitset::BitSet1024"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitSet%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#114-150\">source</a><a href=\"#impl-BitSet%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"num_traits/int/trait.PrimInt.html\" title=\"trait num_traits::int::PrimInt\">PrimInt</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"rbitset/struct.BitSet.html\" title=\"struct rbitset::BitSet\">BitSet</a>&lt;T, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_default\" class=\"method\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#126-128\">source</a><h4 class=\"code-header\">pub fn <a href=\"rbitset/struct.BitSet.html#tymethod.with_default\" class=\"fn\">with_default</a>() -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create an empty instance with default value.</p>\n<p>This function is the same as <a href=\"rbitset/struct.BitSet.html#method.new\" title=\"associated function rbitset::BitSet::new\"><code>new</code></a> but without the constness.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>rbitset::BitSet;\n\n<span class=\"kw\">let </span>set = BitSet::&lt;u32, <span class=\"number\">7</span>&gt;::new();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#145-149\">source</a><h4 class=\"code-header\">pub fn <a href=\"rbitset/struct.BitSet.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Clears the set, disabling all bits, removing all elements.</p>\n<p>Probably faster than what <code>fill(.., false)</code> would be.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>rbitset::BitSet8;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = BitSet8::new();\nset.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert!</span>(!set.is_empty());\nset.clear();\n<span class=\"macro\">assert!</span>(set.is_empty());</code></pre></div>\n</div></details></div></details>",0,"rbitset::BitSet8","rbitset::BitSet16","rbitset::BitSet32","rbitset::BitSet64","rbitset::BitSet128","rbitset::BitSet256","rbitset::BitSet512","rbitset::BitSet1024"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitSet%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#152-187\">source</a><a href=\"#impl-BitSet%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"rbitset/struct.BitSet.html\" title=\"struct rbitset::BitSet\">BitSet</a>&lt;T, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_inner\" class=\"method\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#163-165\">source</a><h4 class=\"code-header\">pub fn <a href=\"rbitset/struct.BitSet.html#tymethod.into_inner\" class=\"fn\">into_inner</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.array.html\">[T; N]</a></h4></section></summary><div class=\"docblock\"><p>Return the inner integer array.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>rbitset::BitSet8;\n\n<span class=\"kw\">let </span>set = BitSet8::from_iter([<span class=\"number\">1u8</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(set.into_inner(), [<span class=\"number\">0b00001110</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#179-181\">source</a><h4 class=\"code-header\">pub const fn <a href=\"rbitset/struct.BitSet.html#tymethod.capacity\" class=\"fn\">capacity</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the capacity of the set, in other words how many bits it can hold.</p>\n<p>This function may very well overflow if the size or length is too big, but if you’re making\nthat big allocations you probably got bigger things to worry about.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>rbitset::BitSet;\n\n<span class=\"kw\">let </span>capacity = BitSet::&lt;u32, <span class=\"number\">3</span>&gt;::capacity();\n<span class=\"macro\">assert_eq!</span>(capacity, <span class=\"number\">32 </span>* <span class=\"number\">3</span>);</code></pre></div>\n</div></details></div></details>",0,"rbitset::BitSet8","rbitset::BitSet16","rbitset::BitSet32","rbitset::BitSet64","rbitset::BitSet128","rbitset::BitSet256","rbitset::BitSet512","rbitset::BitSet1024"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitSet%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#189-832\">source</a><a href=\"#impl-BitSet%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"num_traits/int/trait.PrimInt.html\" title=\"trait num_traits::int::PrimInt\">PrimInt</a>, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"rbitset/struct.BitSet.html\" title=\"struct rbitset::BitSet\">BitSet</a>&lt;T, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ref\" class=\"method\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#203-206\">source</a><h4 class=\"code-header\">pub fn <a href=\"rbitset/struct.BitSet.html#tymethod.from_ref\" class=\"fn\">from_ref</a>(inner: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.array.html\">[T; N]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut Self</a></h4></section></summary><div class=\"docblock\"><p>Transmutes a reference to a borrowed bit array to a borrowed BitSet with the same lifetime.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>rbitset::BitSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>raw = [<span class=\"number\">0b00001110</span>, <span class=\"number\">0u8</span>];\n<span class=\"kw\">let </span>set = BitSet::from_ref(<span class=\"kw-2\">&amp;mut </span>raw);\n<span class=\"macro\">assert!</span>(set.contains(<span class=\"number\">1</span>));\n<span class=\"macro\">assert!</span>(set.contains(<span class=\"number\">2</span>));\n<span class=\"macro\">assert!</span>(set.contains(<span class=\"number\">3</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_append\" class=\"method\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#243-251\">source</a><h4 class=\"code-header\">pub fn <a href=\"rbitset/struct.BitSet.html#tymethod.try_append\" class=\"fn\">try_append</a>&lt;U, const M: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>&gt;(\n    &amp;mut self,\n    other: &amp;mut <a class=\"struct\" href=\"rbitset/struct.BitSet.html\" title=\"struct rbitset::BitSet\">BitSet</a>&lt;U, M&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"rbitset/enum.BitSetError.html\" title=\"enum rbitset::BitSetError\">BitSetError</a>&gt;<div class=\"where\">where\n    U: <a class=\"trait\" href=\"num_traits/int/trait.PrimInt.html\" title=\"trait num_traits::int::PrimInt\">PrimInt</a>,</div></h4></section></summary><div class=\"docblock\"><p>Tries to move all elements from <code>other</code> into <code>self</code>, leaving <code>other</code> empty.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>rbitset::BitSet16;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = BitSet16::new();\na.insert(<span class=\"number\">1</span>);\na.insert(<span class=\"number\">2</span>);\na.insert(<span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>b = BitSet16::new();\nb.insert(<span class=\"number\">3</span>);\nb.insert(<span class=\"number\">4</span>);\nb.insert(<span class=\"number\">5</span>);\n\na.try_append(<span class=\"kw-2\">&amp;mut </span>b).expect(<span class=\"string\">\"An error occurred\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(a.len(), <span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(b.len(), <span class=\"number\">0</span>);\n\n<span class=\"macro\">assert!</span>(a.contains(<span class=\"number\">1</span>));\n<span class=\"macro\">assert!</span>(a.contains(<span class=\"number\">2</span>));\n<span class=\"macro\">assert!</span>(a.contains(<span class=\"number\">3</span>));\n<span class=\"macro\">assert!</span>(a.contains(<span class=\"number\">4</span>));\n<span class=\"macro\">assert!</span>(a.contains(<span class=\"number\">5</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_insert\" class=\"method\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#270-284\">source</a><h4 class=\"code-header\">pub fn <a href=\"rbitset/struct.BitSet.html#tymethod.try_insert\" class=\"fn\">try_insert</a>(&amp;mut self, bit: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a>, <a class=\"enum\" href=\"rbitset/enum.BitSetError.html\" title=\"enum rbitset::BitSetError\">BitSetError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to add a value to the set.</p>\n<p>If the set did not have this value present, <code>true</code> is returned.</p>\n<p>If the set did have this value present, <code>false</code> is returned.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>rbitset::{BitSet16, BitSetError};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = BitSet16::new();\n\n<span class=\"macro\">assert_eq!</span>(set.try_insert(<span class=\"number\">2</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"bool-val\">true</span>));\n<span class=\"macro\">assert_eq!</span>(set.try_insert(<span class=\"number\">2</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(set.try_insert(<span class=\"number\">16</span>), <span class=\"prelude-val\">Err</span>(BitSetError::BiggerThanCapacity));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#295-301\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"rbitset/struct.BitSet.html#tymethod.insert_unchecked\" class=\"fn\">insert_unchecked</a>(&amp;mut self, bit: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Inserts a value to the set without making any checks.</p>\n<p>If the set did not have this value present, <code>true</code> is returned.</p>\n<p>If the set did have this value present, <code>false</code> is returned.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>Behavior is undefined if any of the following conditions are violated:</p>\n<ul>\n<li>The <code>bit</code> value is bigger than the capacity of the bitset</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_remove\" class=\"method\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#318-331\">source</a><h4 class=\"code-header\">pub fn <a href=\"rbitset/struct.BitSet.html#tymethod.try_remove\" class=\"fn\">try_remove</a>(&amp;mut self, bit: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a>, <a class=\"enum\" href=\"rbitset/enum.BitSetError.html\" title=\"enum rbitset::BitSetError\">BitSetError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Removes a value from the set. Returns whether the value was present in the set.</p>\n<p>If the bit is already disabled this is a no-op.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>rbitset::BitSet8;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = BitSet8::new();\n\nset.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(set.remove(<span class=\"number\">2</span>), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(set.remove(<span class=\"number\">2</span>), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#341-347\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"rbitset/struct.BitSet.html#tymethod.remove_unchecked\" class=\"fn\">remove_unchecked</a>(&amp;mut self, bit: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Removes a value from the set without any checking. Returns whether the value was present in\nthe set.</p>\n<p>If the bit is already disabled this is a no-op.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>Behavior is undefined if any of the following conditions are violated:</p>\n<ul>\n<li>The <code>bit</code> value is bigger than the capacity of the bitset</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.append\" class=\"method\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#381-386\">source</a><h4 class=\"code-header\">pub fn <a href=\"rbitset/struct.BitSet.html#tymethod.append\" class=\"fn\">append</a>&lt;U, const M: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>&gt;(&amp;mut self, other: &amp;mut <a class=\"struct\" href=\"rbitset/struct.BitSet.html\" title=\"struct rbitset::BitSet\">BitSet</a>&lt;U, M&gt;)<div class=\"where\">where\n    U: <a class=\"trait\" href=\"num_traits/int/trait.PrimInt.html\" title=\"trait num_traits::int::PrimInt\">PrimInt</a>,</div></h4></section></summary><div class=\"docblock\"><p>Move all elements from <code>other</code> into <code>self</code>, leaving <code>other</code> empty.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>This function may panic if <code>other</code> contains activated bits bigger than what <code>self</code> capacity.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>rbitset::BitSet16;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = BitSet16::new();\na.insert(<span class=\"number\">1</span>);\na.insert(<span class=\"number\">2</span>);\na.insert(<span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>b = BitSet16::new();\nb.insert(<span class=\"number\">3</span>);\nb.insert(<span class=\"number\">4</span>);\nb.insert(<span class=\"number\">5</span>);\n\na.append(<span class=\"kw-2\">&amp;mut </span>b);\n\n<span class=\"macro\">assert_eq!</span>(a.len(), <span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(b.len(), <span class=\"number\">0</span>);\n\n<span class=\"macro\">assert!</span>(a.contains(<span class=\"number\">1</span>));\n<span class=\"macro\">assert!</span>(a.contains(<span class=\"number\">2</span>));\n<span class=\"macro\">assert!</span>(a.contains(<span class=\"number\">3</span>));\n<span class=\"macro\">assert!</span>(a.contains(<span class=\"number\">4</span>));\n<span class=\"macro\">assert!</span>(a.contains(<span class=\"number\">5</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#411-414\">source</a><h4 class=\"code-header\">pub fn <a href=\"rbitset/struct.BitSet.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, bit: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Adds a value to the set.</p>\n<p>If the set did not have this value present, <code>true</code> is returned.</p>\n<p>If the set did have this value present, <code>false</code> is returned.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>This function may panic if <code>bit</code> value trying to be inserted is bigger than the\n<a href=\"rbitset/struct.BitSet.html#method.capacity\" title=\"associated function rbitset::BitSet::capacity\"><code>capacity</code></a> of the <a href=\"rbitset/struct.BitSet.html\" title=\"struct rbitset::BitSet\"><code>BitSet</code></a>. Check <a href=\"rbitset/struct.BitSet.html#method.try_insert\" title=\"method rbitset::BitSet::try_insert\"><code>try_insert</code></a>\nfor a non-panicking version</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>rbitset::BitSet16;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = BitSet16::new();\n\n<span class=\"macro\">assert_eq!</span>(set.insert(<span class=\"number\">2</span>), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(set.insert(<span class=\"number\">2</span>), <span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(set.len(), <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#436-439\">source</a><h4 class=\"code-header\">pub fn <a href=\"rbitset/struct.BitSet.html#tymethod.remove\" class=\"fn\">remove</a>(&amp;mut self, bit: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Removes a value from the set. Returns whether the value was present in the set.</p>\n<p>If the bit is already disabled this is a no-op.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>This function may panic if <code>bit</code> value trying to be removed is bigger than the\n<a href=\"rbitset/struct.BitSet.html#method.capacity\" title=\"associated function rbitset::BitSet::capacity\"><code>capacity</code></a> of the <a href=\"rbitset/struct.BitSet.html\" title=\"struct rbitset::BitSet\"><code>BitSet</code></a>. Check <a href=\"rbitset/struct.BitSet.html#method.try_remove\" title=\"method rbitset::BitSet::try_remove\"><code>try_remove</code></a>\nfor a non-panicking version</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>rbitset::BitSet8;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = BitSet8::new();\n\nset.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(set.remove(<span class=\"number\">2</span>), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(set.remove(<span class=\"number\">2</span>), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain\" class=\"method\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#457-467\">source</a><h4 class=\"code-header\">pub fn <a href=\"rbitset/struct.BitSet.html#tymethod.retain\" class=\"fn\">retain</a>&lt;F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Retains only the elements specified by the predicate.</p>\n<p>In other words, remove all elements <code>e</code> for which <code>f(&amp;e)</code> returns <code>false</code>.\nThe elements are visited in ascending order.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>rbitset::BitSet16;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = BitSet16::from_iter([<span class=\"number\">1u8</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n<span class=\"comment\">// Keep only the even numbers.\n</span>set.retain(|k| k % <span class=\"number\">2 </span>== <span class=\"number\">0</span>);\n<span class=\"kw\">let </span>res = BitSet16::from_iter([<span class=\"number\">2u8</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>]);\n<span class=\"macro\">assert_eq!</span>(set, res);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains\" class=\"method\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#481-491\">source</a><h4 class=\"code-header\">pub fn <a href=\"rbitset/struct.BitSet.html#tymethod.contains\" class=\"fn\">contains</a>(&amp;self, bit: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the specified <code>bit</code> is enabled, in other words, if the set contains a\nvalue.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>rbitset::BitSet8;\n\n<span class=\"kw\">let </span>set = BitSet8::from_iter([<span class=\"number\">1u8</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(set.contains(<span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(set.contains(<span class=\"number\">4</span>), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_contains\" class=\"method\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#505-516\">source</a><h4 class=\"code-header\">pub fn <a href=\"rbitset/struct.BitSet.html#tymethod.try_contains\" class=\"fn\">try_contains</a>(&amp;self, bit: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a>, <a class=\"enum\" href=\"rbitset/enum.BitSetError.html\" title=\"enum rbitset::BitSetError\">BitSetError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the specified <code>bit</code> is enabled, in other words, if the set contains a\nvalue.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>rbitset::BitSet8;\n\n<span class=\"kw\">let </span>set = BitSet8::from_iter([<span class=\"number\">1u8</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(set.try_contains(<span class=\"number\">1</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"bool-val\">true</span>));\n<span class=\"macro\">assert_eq!</span>(set.try_contains(<span class=\"number\">4</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"bool-val\">false</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#531-533\">source</a><h4 class=\"code-header\">pub fn <a href=\"rbitset/struct.BitSet.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of elements in the set.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>rbitset::BitSet16;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = BitSet16::new();\n<span class=\"macro\">assert_eq!</span>(set.len(), <span class=\"number\">0</span>);\nset.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(set.len(), <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#547-549\">source</a><h4 class=\"code-header\">pub fn <a href=\"rbitset/struct.BitSet.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the set contains no elements.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>rbitset::BitSet16;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = BitSet16::new();\n<span class=\"macro\">assert!</span>(set.is_empty());\nset.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert!</span>(!set.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_disjoint\" class=\"method\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#568-574\">source</a><h4 class=\"code-header\">pub fn <a href=\"rbitset/struct.BitSet.html#tymethod.is_disjoint\" class=\"fn\">is_disjoint</a>&lt;U: <a class=\"trait\" href=\"num_traits/int/trait.PrimInt.html\" title=\"trait num_traits::int::PrimInt\">PrimInt</a>, const M: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>&gt;(\n    &amp;self,\n    other: &amp;<a class=\"struct\" href=\"rbitset/struct.BitSet.html\" title=\"struct rbitset::BitSet\">BitSet</a>&lt;U, M&gt;\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. This is equivalent to\nchecking for an empty intersection.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>rbitset::BitSet128;\n\n<span class=\"kw\">let </span>a = BitSet128::from_iter([<span class=\"number\">1u8</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>b = BitSet128::new();\n\n<span class=\"macro\">assert!</span>(a.is_disjoint(<span class=\"kw-2\">&amp;</span>b));\nb.insert(<span class=\"number\">4</span>);\n<span class=\"macro\">assert!</span>(a.is_disjoint(<span class=\"kw-2\">&amp;</span>b));\nb.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert!</span>(!a.is_disjoint(<span class=\"kw-2\">&amp;</span>b));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_subset\" class=\"method\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#593-599\">source</a><h4 class=\"code-header\">pub fn <a href=\"rbitset/struct.BitSet.html#tymethod.is_subset\" class=\"fn\">is_subset</a>&lt;U: <a class=\"trait\" href=\"num_traits/int/trait.PrimInt.html\" title=\"trait num_traits::int::PrimInt\">PrimInt</a>, const M: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>&gt;(\n    &amp;self,\n    other: &amp;<a class=\"struct\" href=\"rbitset/struct.BitSet.html\" title=\"struct rbitset::BitSet\">BitSet</a>&lt;U, M&gt;\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the set is a subset of another, i.e., <code>other</code> contains at least all the\nvalues in <code>self</code>.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>rbitset::BitSet8;\n\n<span class=\"kw\">let </span>sup = BitSet8::from_iter([<span class=\"number\">1u8</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = BitSet8::new();\n\n<span class=\"macro\">assert!</span>(set.is_subset(<span class=\"kw-2\">&amp;</span>sup));\nset.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert!</span>(set.is_subset(<span class=\"kw-2\">&amp;</span>sup));\nset.insert(<span class=\"number\">4</span>);\n<span class=\"macro\">assert!</span>(!set.is_subset(<span class=\"kw-2\">&amp;</span>sup));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_superset\" class=\"method\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#622-624\">source</a><h4 class=\"code-header\">pub fn <a href=\"rbitset/struct.BitSet.html#tymethod.is_superset\" class=\"fn\">is_superset</a>&lt;U: <a class=\"trait\" href=\"num_traits/int/trait.PrimInt.html\" title=\"trait num_traits::int::PrimInt\">PrimInt</a>, const M: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>&gt;(\n    &amp;self,\n    other: &amp;<a class=\"struct\" href=\"rbitset/struct.BitSet.html\" title=\"struct rbitset::BitSet\">BitSet</a>&lt;U, M&gt;\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the set is a superset of another, i.e., <code>self</code> contains at least all the\nvalues in <code>other</code>.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>rbitset::BitSet8;\n\n<span class=\"kw\">let </span>sub = BitSet8::from_iter([<span class=\"number\">1u8</span>, <span class=\"number\">2</span>]);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = BitSet8::new();\n\n<span class=\"macro\">assert!</span>(!set.is_superset(<span class=\"kw-2\">&amp;</span>sub));\n\nset.insert(<span class=\"number\">0</span>);\nset.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert!</span>(!set.is_superset(<span class=\"kw-2\">&amp;</span>sub));\n\nset.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert!</span>(set.is_superset(<span class=\"kw-2\">&amp;</span>sub));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_ones\" class=\"method\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#636-642\">source</a><h4 class=\"code-header\">pub fn <a href=\"rbitset/struct.BitSet.html#tymethod.count_ones\" class=\"fn\">count_ones</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the total number of enabled bits.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>rbitset::BitSet8;\n\n<span class=\"kw\">let </span>set = BitSet8::from_iter([<span class=\"number\">1u8</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(set.count_ones(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_zeros\" class=\"method\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#654-662\">source</a><h4 class=\"code-header\">pub fn <a href=\"rbitset/struct.BitSet.html#tymethod.count_zeros\" class=\"fn\">count_zeros</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the total number of disabled bits.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>rbitset::BitSet8;\n\n<span class=\"kw\">let </span>set = BitSet8::from_iter([<span class=\"number\">1u8</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(set.count_zeros(), <span class=\"number\">5</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drain\" class=\"method\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#684-686\">source</a><h4 class=\"code-header\">pub fn <a href=\"rbitset/struct.BitSet.html#tymethod.drain\" class=\"fn\">drain</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"rbitset/struct.Drain.html\" title=\"struct rbitset::Drain\">Drain</a>&lt;'_, T, N&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Drain&lt;&#39;_, T, N&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Clears the set, returning all elements as an iterator. Keeps the allocated memory for reuse.</p>\n<p>If the returned iterator is dropped before being fully consumed, it drops the remaining\nelements. The returned iterator keeps a mutable borrow on the vector to optimize its\nimplementation.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>rbitset::BitSet8;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = BitSet8::from_iter([<span class=\"number\">1u8</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert!</span>(!set.is_empty());\n\n<span class=\"kw\">for </span>i <span class=\"kw\">in </span>set.drain() {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{i}\"</span>);\n}\n\n<span class=\"macro\">assert!</span>(set.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.difference\" class=\"method\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#714-721\">source</a><h4 class=\"code-header\">pub fn <a href=\"rbitset/struct.BitSet.html#tymethod.difference\" class=\"fn\">difference</a>&lt;'a, U: <a class=\"trait\" href=\"num_traits/int/trait.PrimInt.html\" title=\"trait num_traits::int::PrimInt\">PrimInt</a>, const M: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>&gt;(\n    &amp;'a self,\n    other: &amp;'a <a class=\"struct\" href=\"rbitset/struct.BitSet.html\" title=\"struct rbitset::BitSet\">BitSet</a>&lt;U, M&gt;\n) -&gt; <a class=\"struct\" href=\"rbitset/struct.Difference.html\" title=\"struct rbitset::Difference\">Difference</a>&lt;'a, T, U, N, M&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Difference&lt;&#39;a, T, U, N, M&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Visits the values representing the difference, i.e., the values that are in <code>self</code> but not\nin <code>other</code>.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>rbitset::BitSet8;\n\n<span class=\"kw\">let </span>a = BitSet8::from_iter([<span class=\"number\">1u8</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span>b = BitSet8::from_iter([<span class=\"number\">4u8</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n\n<span class=\"comment\">// Can be seen as `a - b`.\n</span><span class=\"kw\">for </span>x <span class=\"kw\">in </span>a.difference(<span class=\"kw-2\">&amp;</span>b) {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{x}\"</span>); <span class=\"comment\">// Print 1\n</span>}\n\n<span class=\"kw\">let </span>diff: BitSet8 = a.difference(<span class=\"kw-2\">&amp;</span>b).collect();\n<span class=\"kw\">let </span>res = BitSet8::from_iter([<span class=\"number\">1u8</span>]);\n<span class=\"macro\">assert_eq!</span>(diff, res);\n\n<span class=\"comment\">// Note that difference is not symmetric,\n// and `b - a` means something else:\n</span><span class=\"kw\">let </span>diff: BitSet8 = b.difference(<span class=\"kw-2\">&amp;</span>a).collect();\n<span class=\"kw\">let </span>res = BitSet8::from_iter([<span class=\"number\">4u8</span>]);\n<span class=\"macro\">assert_eq!</span>(diff, res);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.intersection\" class=\"method\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#742-749\">source</a><h4 class=\"code-header\">pub fn <a href=\"rbitset/struct.BitSet.html#tymethod.intersection\" class=\"fn\">intersection</a>&lt;'a, U: <a class=\"trait\" href=\"num_traits/int/trait.PrimInt.html\" title=\"trait num_traits::int::PrimInt\">PrimInt</a>, const M: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>&gt;(\n    &amp;'a self,\n    other: &amp;'a <a class=\"struct\" href=\"rbitset/struct.BitSet.html\" title=\"struct rbitset::BitSet\">BitSet</a>&lt;U, M&gt;\n) -&gt; <a class=\"struct\" href=\"rbitset/struct.Intersection.html\" title=\"struct rbitset::Intersection\">Intersection</a>&lt;'a, T, U, N, M&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Intersection&lt;&#39;a, T, U, N, M&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Visits the values representing the intersection, i.e., the values that are both in <code>self</code>\nand <code>other</code>.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>rbitset::BitSet8;\n\n<span class=\"kw\">let </span>a = BitSet8::from_iter([<span class=\"number\">1u8</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span>b = BitSet8::from_iter([<span class=\"number\">4u8</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n\n<span class=\"kw\">for </span>x <span class=\"kw\">in </span>a.intersection(<span class=\"kw-2\">&amp;</span>b) {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{x}\"</span>);\n}\n\n<span class=\"kw\">let </span>intersection: BitSet8 = a.intersection(<span class=\"kw-2\">&amp;</span>b).collect();\n<span class=\"kw\">let </span>test = BitSet8::from_iter([<span class=\"number\">2u8</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(intersection, test);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.symmetric_difference\" class=\"method\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#773-779\">source</a><h4 class=\"code-header\">pub fn <a href=\"rbitset/struct.BitSet.html#tymethod.symmetric_difference\" class=\"fn\">symmetric_difference</a>&lt;'a, U: <a class=\"trait\" href=\"num_traits/int/trait.PrimInt.html\" title=\"trait num_traits::int::PrimInt\">PrimInt</a>, const M: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>&gt;(\n    &amp;'a self,\n    other: &amp;'a <a class=\"struct\" href=\"rbitset/struct.BitSet.html\" title=\"struct rbitset::BitSet\">BitSet</a>&lt;U, M&gt;\n) -&gt; <a class=\"struct\" href=\"rbitset/struct.SymmetricDifference.html\" title=\"struct rbitset::SymmetricDifference\">SymmetricDifference</a>&lt;'a, T, U, N, M&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"SymmetricDifference&lt;&#39;a, T, U, N, M&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Visits the values representing the symmetric difference, i.e., the values that are in <code>self</code>\nor in <code>other</code> but not in both.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>rbitset::BitSet8;\n\n<span class=\"kw\">let </span>a = BitSet8::from_iter([<span class=\"number\">1u8</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span>b = BitSet8::from_iter([<span class=\"number\">4u8</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n\n<span class=\"kw\">for </span>x <span class=\"kw\">in </span>a.symmetric_difference(<span class=\"kw-2\">&amp;</span>b) {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{x}\"</span>);\n}\n\n<span class=\"kw\">let </span>diff1: BitSet8 = a.symmetric_difference(<span class=\"kw-2\">&amp;</span>b).collect();\n<span class=\"kw\">let </span>diff2: BitSet8 = b.symmetric_difference(<span class=\"kw-2\">&amp;</span>a).collect();\n\n<span class=\"macro\">assert_eq!</span>(diff1, diff2);\n<span class=\"kw\">let </span>res = BitSet8::from_iter([<span class=\"number\">1u8</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(diff1, res);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.union\" class=\"method\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#800-812\">source</a><h4 class=\"code-header\">pub fn <a href=\"rbitset/struct.BitSet.html#tymethod.union\" class=\"fn\">union</a>&lt;'a, U: <a class=\"trait\" href=\"num_traits/int/trait.PrimInt.html\" title=\"trait num_traits::int::PrimInt\">PrimInt</a>, const M: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>&gt;(\n    &amp;'a self,\n    other: &amp;'a <a class=\"struct\" href=\"rbitset/struct.BitSet.html\" title=\"struct rbitset::BitSet\">BitSet</a>&lt;U, M&gt;\n) -&gt; <a class=\"struct\" href=\"rbitset/struct.Union.html\" title=\"struct rbitset::Union\">Union</a>&lt;'a, T, U, N, M&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Union&lt;&#39;a, T, U, N, M&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Visits the values representing the union, i.e., all the values in <code>self</code> or <code>other</code>, without\nduplicates.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>rbitset::BitSet8;\n\n<span class=\"kw\">let </span>a = BitSet8::from_iter([<span class=\"number\">1u8</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span>b = BitSet8::from_iter([<span class=\"number\">4u8</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n\n<span class=\"kw\">for </span>x <span class=\"kw\">in </span>a.union(<span class=\"kw-2\">&amp;</span>b) {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{x}\"</span>);\n}\n\n<span class=\"kw\">let union</span>: BitSet8 = a.union(<span class=\"kw-2\">&amp;</span>b).collect();\n<span class=\"kw\">let </span>res = BitSet8::from_iter([<span class=\"number\">1u8</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(union, res);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#829-831\">source</a><h4 class=\"code-header\">pub fn <a href=\"rbitset/struct.BitSet.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"rbitset/struct.Iter.html\" title=\"struct rbitset::Iter\">Iter</a>&lt;'_, T, N&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Iter&lt;&#39;_, T, N&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>An iterator visiting all elements in the set.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>rbitset::BitSet8;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = BitSet8::new();\nset.insert(<span class=\"number\">1</span>);\nset.insert(<span class=\"number\">2</span>);\n\n<span class=\"kw\">for </span>x <span class=\"kw\">in </span>set.iter() {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{x}\"</span>);\n}</code></pre></div>\n</div></details></div></details>",0,"rbitset::BitSet8","rbitset::BitSet16","rbitset::BitSet32","rbitset::BitSet64","rbitset::BitSet128","rbitset::BitSet256","rbitset::BitSet512","rbitset::BitSet1024"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitSet%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#834-912\">source</a><a href=\"#impl-BitSet%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> + <a class=\"trait\" href=\"num_traits/int/trait.PrimInt.html\" title=\"trait num_traits::int::PrimInt\">PrimInt</a>, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"rbitset/struct.BitSet.html\" title=\"struct rbitset::BitSet\">BitSet</a>&lt;T, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fill\" class=\"method\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#839-911\">source</a><h4 class=\"code-header\">pub fn <a href=\"rbitset/struct.BitSet.html#tymethod.fill\" class=\"fn\">fill</a>&lt;R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>&gt;&gt;(&amp;mut self, range: R, on: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Set all bits in a range. <code>fill(.., false)</code> is effectively the same as <code>clear()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the start or end bounds are more than the capacity.</p>\n</div></details></div></details>",0,"rbitset::BitSet8","rbitset::BitSet16","rbitset::BitSet32","rbitset::BitSet64","rbitset::BitSet128","rbitset::BitSet256","rbitset::BitSet512","rbitset::BitSet1024"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitSet%3Cu16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#112\">source</a><a href=\"#impl-BitSet%3Cu16,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"rbitset/struct.BitSet.html\" title=\"struct rbitset::BitSet\">BitSet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u16.html\">u16</a>, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#112\">source</a><h4 class=\"code-header\">pub const fn <a href=\"rbitset/struct.BitSet.html#tymethod.new\" class=\"fn\">new</a>() -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create an empty instance of <a href=\"rbitset/struct.BitSet.html\" title=\"struct rbitset::BitSet\"><code>BitSet</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>rbitset::BitSet;\n\n<span class=\"kw\">let </span>set = BitSet::&lt;u8, <span class=\"number\">1</span>&gt;::new();</code></pre></div>\n</div></details></div></details>",0,"rbitset::BitSet16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitSet%3Cu32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#112\">source</a><a href=\"#impl-BitSet%3Cu32,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"rbitset/struct.BitSet.html\" title=\"struct rbitset::BitSet\">BitSet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u32.html\">u32</a>, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#112\">source</a><h4 class=\"code-header\">pub const fn <a href=\"rbitset/struct.BitSet.html#tymethod.new\" class=\"fn\">new</a>() -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create an empty instance of <a href=\"rbitset/struct.BitSet.html\" title=\"struct rbitset::BitSet\"><code>BitSet</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>rbitset::BitSet;\n\n<span class=\"kw\">let </span>set = BitSet::&lt;u8, <span class=\"number\">1</span>&gt;::new();</code></pre></div>\n</div></details></div></details>",0,"rbitset::BitSet32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitSet%3Cu64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#112\">source</a><a href=\"#impl-BitSet%3Cu64,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"rbitset/struct.BitSet.html\" title=\"struct rbitset::BitSet\">BitSet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u64.html\">u64</a>, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#112\">source</a><h4 class=\"code-header\">pub const fn <a href=\"rbitset/struct.BitSet.html#tymethod.new\" class=\"fn\">new</a>() -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create an empty instance of <a href=\"rbitset/struct.BitSet.html\" title=\"struct rbitset::BitSet\"><code>BitSet</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>rbitset::BitSet;\n\n<span class=\"kw\">let </span>set = BitSet::&lt;u8, <span class=\"number\">1</span>&gt;::new();</code></pre></div>\n</div></details></div></details>",0,"rbitset::BitSet64","rbitset::BitSet128","rbitset::BitSet256","rbitset::BitSet512","rbitset::BitSet1024"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitSet%3Cu8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#112\">source</a><a href=\"#impl-BitSet%3Cu8,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"rbitset/struct.BitSet.html\" title=\"struct rbitset::BitSet\">BitSet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#112\">source</a><h4 class=\"code-header\">pub const fn <a href=\"rbitset/struct.BitSet.html#tymethod.new\" class=\"fn\">new</a>() -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create an empty instance of <a href=\"rbitset/struct.BitSet.html\" title=\"struct rbitset::BitSet\"><code>BitSet</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>rbitset::BitSet;\n\n<span class=\"kw\">let </span>set = BitSet::&lt;u8, <span class=\"number\">1</span>&gt;::new();</code></pre></div>\n</div></details></div></details>",0,"rbitset::BitSet8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-BitSet%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#42\">source</a><a href=\"#impl-Clone-for-BitSet%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"rbitset/struct.BitSet.html\" title=\"struct rbitset::BitSet\">BitSet</a>&lt;T, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#42\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"rbitset/struct.BitSet.html\" title=\"struct rbitset::BitSet\">BitSet</a>&lt;T, N&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","rbitset::BitSet8","rbitset::BitSet16","rbitset::BitSet32","rbitset::BitSet64","rbitset::BitSet128","rbitset::BitSet256","rbitset::BitSet512","rbitset::BitSet1024"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-BitSet%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#61-67\">source</a><a href=\"#impl-Debug-for-BitSet%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"rbitset/struct.BitSet.html\" title=\"struct rbitset::BitSet\">BitSet</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"num_traits/int/trait.PrimInt.html\" title=\"trait num_traits::int::PrimInt\">PrimInt</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#64-66\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/nightly/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","rbitset::BitSet8","rbitset::BitSet16","rbitset::BitSet32","rbitset::BitSet64","rbitset::BitSet128","rbitset::BitSet256","rbitset::BitSet512","rbitset::BitSet1024"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-BitSet%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#47-53\">source</a><a href=\"#impl-Default-for-BitSet%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"num_traits/int/trait.PrimInt.html\" title=\"trait num_traits::int::PrimInt\">PrimInt</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"rbitset/struct.BitSet.html\" title=\"struct rbitset::BitSet\">BitSet</a>&lt;T, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#48-52\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; Self</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","rbitset::BitSet8","rbitset::BitSet16","rbitset::BitSet32","rbitset::BitSet64","rbitset::BitSet128","rbitset::BitSet256","rbitset::BitSet512","rbitset::BitSet1024"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3CU%3E-for-BitSet%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#925-931\">source</a><a href=\"#impl-Extend%3CU%3E-for-BitSet%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"num_traits/int/trait.PrimInt.html\" title=\"trait num_traits::int::PrimInt\">PrimInt</a>, U: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>&gt;, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;U&gt; for <a class=\"struct\" href=\"rbitset/struct.BitSet.html\" title=\"struct rbitset::BitSet\">BitSet</a>&lt;T, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#926-930\">source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = U&gt;&gt;(&amp;mut self, iter: I)</h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/collect.rs.html#376\">source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/collect.rs.html#384\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<U>","rbitset::BitSet8","rbitset::BitSet16","rbitset::BitSet32","rbitset::BitSet64","rbitset::BitSet128","rbitset::BitSet256","rbitset::BitSet512","rbitset::BitSet1024"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5BT;+N%5D%3E-for-BitSet%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#55-59\">source</a><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-BitSet%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"num_traits/int/trait.PrimInt.html\" title=\"trait num_traits::int::PrimInt\">PrimInt</a>, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"rbitset/struct.BitSet.html\" title=\"struct rbitset::BitSet\">BitSet</a>&lt;T, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#56-58\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(inner: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.array.html\">[T; N]</a>) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<[T; N]>","rbitset::BitSet8","rbitset::BitSet16","rbitset::BitSet32","rbitset::BitSet64","rbitset::BitSet128","rbitset::BitSet256","rbitset::BitSet512","rbitset::BitSet1024"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3CU%3E-for-BitSet%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#914-923\">source</a><a href=\"#impl-FromIterator%3CU%3E-for-BitSet%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"num_traits/int/trait.PrimInt.html\" title=\"trait num_traits::int::PrimInt\">PrimInt</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>, U: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>&gt;, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;U&gt; for <a class=\"struct\" href=\"rbitset/struct.BitSet.html\" title=\"struct rbitset::BitSet\">BitSet</a>&lt;T, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#915-922\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; Self<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = U&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<U>","rbitset::BitSet8","rbitset::BitSet16","rbitset::BitSet32","rbitset::BitSet64","rbitset::BitSet128","rbitset::BitSet256","rbitset::BitSet512","rbitset::BitSet1024"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-BitSet%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#933-940\">source</a><a href=\"#impl-IntoIterator-for-BitSet%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"num_traits/int/trait.PrimInt.html\" title=\"trait num_traits::int::PrimInt\">PrimInt</a>, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"struct\" href=\"rbitset/struct.BitSet.html\" title=\"struct rbitset::BitSet\">BitSet</a>&lt;T, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"rbitset/struct.IntoIter.html\" title=\"struct rbitset::IntoIter\">IntoIter</a>&lt;T, N&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#937-939\">source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a></h4></section></summary><div class='docblock'>Creates an iterator from a value. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details>","IntoIterator","rbitset::BitSet8","rbitset::BitSet16","rbitset::BitSet32","rbitset::BitSet64","rbitset::BitSet128","rbitset::BitSet256","rbitset::BitSet512","rbitset::BitSet1024"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Not-for-BitSet%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#951-961\">source</a><a href=\"#impl-Not-for-BitSet%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"num_traits/int/trait.PrimInt.html\" title=\"trait num_traits::int::PrimInt\">PrimInt</a>, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Not.html\" title=\"trait core::ops::bit::Not\">Not</a> for <a class=\"struct\" href=\"rbitset/struct.BitSet.html\" title=\"struct rbitset::BitSet\">BitSet</a>&lt;T, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Not.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"rbitset/struct.BitSet.html\" title=\"struct rbitset::BitSet\">BitSet</a>&lt;T, N&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>!</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.not\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#954-960\">source</a><a href=\"#method.not\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Not.html#tymethod.not\" class=\"fn\">not</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Not.html#associatedtype.Output\" title=\"type core::ops::bit::Not::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the unary <code>!</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Not.html#tymethod.not\">Read more</a></div></details></div></details>","Not","rbitset::BitSet8","rbitset::BitSet16","rbitset::BitSet32","rbitset::BitSet64","rbitset::BitSet128","rbitset::BitSet256","rbitset::BitSet512","rbitset::BitSet1024"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-BitSet%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#42\">source</a><a href=\"#impl-PartialEq-for-BitSet%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"rbitset/struct.BitSet.html\" title=\"struct rbitset::BitSet\">BitSet</a>&lt;T, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#42\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"rbitset/struct.BitSet.html\" title=\"struct rbitset::BitSet\">BitSet</a>&lt;T, N&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","rbitset::BitSet8","rbitset::BitSet16","rbitset::BitSet32","rbitset::BitSet64","rbitset::BitSet128","rbitset::BitSet256","rbitset::BitSet512","rbitset::BitSet1024"],["<section id=\"impl-Copy-for-BitSet%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#42\">source</a><a href=\"#impl-Copy-for-BitSet%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"rbitset/struct.BitSet.html\" title=\"struct rbitset::BitSet\">BitSet</a>&lt;T, N&gt;</h3></section>","Copy","rbitset::BitSet8","rbitset::BitSet16","rbitset::BitSet32","rbitset::BitSet64","rbitset::BitSet128","rbitset::BitSet256","rbitset::BitSet512","rbitset::BitSet1024"],["<section id=\"impl-Eq-for-BitSet%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#42\">source</a><a href=\"#impl-Eq-for-BitSet%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"rbitset/struct.BitSet.html\" title=\"struct rbitset::BitSet\">BitSet</a>&lt;T, N&gt;</h3></section>","Eq","rbitset::BitSet8","rbitset::BitSet16","rbitset::BitSet32","rbitset::BitSet64","rbitset::BitSet128","rbitset::BitSet256","rbitset::BitSet512","rbitset::BitSet1024"],["<section id=\"impl-StructuralPartialEq-for-BitSet%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rbitset/lib.rs.html#42\">source</a><a href=\"#impl-StructuralPartialEq-for-BitSet%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"rbitset/struct.BitSet.html\" title=\"struct rbitset::BitSet\">BitSet</a>&lt;T, N&gt;</h3></section>","StructuralPartialEq","rbitset::BitSet8","rbitset::BitSet16","rbitset::BitSet32","rbitset::BitSet64","rbitset::BitSet128","rbitset::BitSet256","rbitset::BitSet512","rbitset::BitSet1024"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()